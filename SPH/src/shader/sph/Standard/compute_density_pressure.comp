#version 430 core

layout(local_size_x = 1536, local_size_y = 1, local_size_z=1) in;

layout(std430, binding = 0) buffer Pos
{
	vec4 pos [];
};
layout(std430, binding = 3) buffer density
{
	float rho [];
};
layout(std430, binding = 4) buffer pressure
{
	float p [];
};

layout(std430, binding = 6) buffer GridCellCount
{
	uint cellCount[];
};
layout(std430, binding = 7) buffer GridCellOffsets
{
	uint cellOffsets[];
};


layout(std430, binding = 9) buffer ParticleBucketList
{
	uint cellParticleBuff[];
};

layout(binding = 0) uniform atomic_uint CELL_OFFSET_VALUE;


// ----------------------------------------------------------------------------
//
// uniforms
//
// ----------------------------------------------------------------------------
uniform int num_of_particles;
uniform ivec3 grid_resolution;
uniform float H;
uniform float grid_spacing;
uniform float HSQ;
uniform float MASS;
uniform float KERNEL;
uniform float GAS_CONSTANT;
uniform float REST_DENSITY;

// ----------------------------------------------------------------------------
//
// functions
//
// ----------------------------------------------------------------------------
float length_squared(vec3 v)
{
    return dot(v,v);
}

uint hashCell(ivec3 cellIndex)
{
	const int p1 = 73856093; 
	const int p2 = 19349663;
	const int p3 = 83492791;

	ivec3 wrappedCellIndex;
	wrappedCellIndex.x = (cellIndex.x*p1)%(grid_resolution.x);
	wrappedCellIndex.y = (cellIndex.y*p2)%(grid_resolution.y);
	wrappedCellIndex.z = (cellIndex.z*p3)%(grid_resolution.z);

	if (wrappedCellIndex.x < 0) { wrappedCellIndex.x += grid_resolution.x; }
	if (wrappedCellIndex.y < 0) { wrappedCellIndex.y += grid_resolution.y; }
	if (wrappedCellIndex.z < 0) { wrappedCellIndex.z += grid_resolution.z; }

	return ((wrappedCellIndex.z * (grid_resolution.y) + wrappedCellIndex.y) * (grid_resolution.x) + wrappedCellIndex.x);
}

ivec3 sph_neighbor_offsets[27] = {
	ivec3(-1, -1, -1),
	ivec3(-1, -1, 0),
	ivec3(-1, -1, 1),
	ivec3(-1, 0, -1),
	ivec3(-1, 0, 0),
	ivec3(-1, 0, 1),
	ivec3(-1, 1, -1),
	ivec3(-1, 1, 0),
	ivec3(-1, 1, 1),
	ivec3(0, -1, -1),
	ivec3(0, -1, 0),
	ivec3(0, -1, 1),
	ivec3(0, 0, -1),
	ivec3(0, 0, 0),
	ivec3(0, 0, 1),
	ivec3(0, 1, -1),
	ivec3(0, 1, 0),
	ivec3(0, 1, 1),
	ivec3(1, -1, -1),
	ivec3(1, -1, 0),
	ivec3(1, -1, 1),
	ivec3(1, 0, -1),
	ivec3(1, 0, 0),
	ivec3(1, 0, 1),
	ivec3(1, 1, -1),
	ivec3(1, 1, 0),
	ivec3(1, 1, 1),
};



uint[8] nearestCells(vec3 particlePosition)
{
	ivec3 cellIndex = ivec3((floor(particlePosition*(grid_spacing)))); 
    ivec3[8] neighbourCells; 
    for(uint i=0;i<8;i++){
       neighbourCells[i] = cellIndex;
    }
    if((cellIndex.x + 0.5) * (2*H) <= particlePosition.x) {
        neighbourCells[4].x += 1;   neighbourCells[5].x += 1;
        neighbourCells[6].x += 1;   neighbourCells[7].x += 1;
    } else {                                               
        neighbourCells[4].x -= 1;   neighbourCells[5].x -= 1;
        neighbourCells[6].x -= 1;   neighbourCells[7].x -= 1;
    }

    if(cellIndex.y + 0.5 * (2*H) <= particlePosition.y) {
        neighbourCells[2].y += 1;   neighbourCells[3].y += 1;
        neighbourCells[6].y += 1;   neighbourCells[7].y += 1;
    } else {
        neighbourCells[2].y -= 1;   neighbourCells[3].y -= 1;
        neighbourCells[6].y -= 1;   neighbourCells[7].y -= 1;
    }

    if(cellIndex.z + 0.5 * (2*H) <= particlePosition.z) {
        neighbourCells[1].z += 1;   neighbourCells[3].z += 1;
        neighbourCells[5].z += 1;   neighbourCells[7].z += 1;
    } else {                                          
        neighbourCells[1].z -= 1;   neighbourCells[3].z -= 1;
        neighbourCells[5].z -= 1;   neighbourCells[7].z -= 1;
    }

    uint neighbourBuckets[8];
    for(int i=0;i<8;i++) {
        neighbourBuckets[i] = hashCell(neighbourCells[i]);
    }
    return neighbourBuckets;
};

void main()
{

    uint i = uint(gl_GlobalInvocationID.x);

	float density = 0.0;
	ivec3 cellIndex = ivec3((floor(pos[i]*(grid_spacing)))); 
    for(int j=0; j< 27; j++) {
        ivec3 neighborCell = cellIndex + sph_neighbor_offsets[j];
		uint bucketIndex = hashCell(neighborCell);
		uint bucketSize = cellCount[bucketIndex];
        if(bucketSize == 0) {continue;}
        uint offset = cellOffsets[bucketIndex];
        for(uint k = offset; k<offset+bucketSize;k++){
            uint neighborParticleIndex = cellParticleBuff[k];
            float distance_squared = length_squared(pos[neighborParticleIndex].xyz - pos[i].xyz);
            if (distance_squared < HSQ)
            {
               density += MASS * KERNEL * pow(HSQ - distance_squared, 3.0);
            }
        }
    }
	rho[i] = density;// max(REST_DENSITY,density);
	p[i] = GAS_CONSTANT * (rho[i] - REST_DENSITY);


}



