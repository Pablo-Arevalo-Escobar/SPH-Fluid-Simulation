#version 460 core
layout(local_size_x = 1000, local_size_y = 1, local_size_z = 1) in;
layout(std430, binding = 0) buffer Pos
{
	vec4 pos [];
};
layout(std430, binding = 6) buffer GridCellCount
{
	uint cellCount[];
};
layout(std430, binding = 7) buffer GridCellOffsets
{
	uint cellOffsets[];
};
layout(std430, binding = 9) buffer ParticleBucketList
{
	uint cellParticleBuff[];
};



uniform float grid_spacing;
uniform ivec3 grid_resolution;

uint hashCell(ivec3 cellIndex)
{
	const int p1 = 73856093; 
	const int p2 = 19349663;
	const int p3 = 83492791;

	ivec3 wrappedCellIndex;
	wrappedCellIndex.x = (cellIndex.x*p1)%(grid_resolution.x);
	wrappedCellIndex.y = (cellIndex.y*p2)%(grid_resolution.y);
	wrappedCellIndex.z = (cellIndex.z*p3)%(grid_resolution.z);

	if (wrappedCellIndex.x < 0) { wrappedCellIndex.x += grid_resolution.x; }
	if (wrappedCellIndex.y < 0) { wrappedCellIndex.y += grid_resolution.y; }
	if (wrappedCellIndex.z < 0) { wrappedCellIndex.z += grid_resolution.z; }

	return ((wrappedCellIndex.z * (grid_resolution.y) + wrappedCellIndex.y) * (grid_resolution.x) + wrappedCellIndex.x);
}

void main() 
{
	uint i = uint(gl_GlobalInvocationID.x);
	ivec3 cellPosition = ivec3(floor(pos[i].xyz*(grid_spacing))); 
	uint hashedCellIndex = hashCell(cellPosition); 
	//Compute cell offset and store it, incremenet global CELL_OFFSET_VALUE
	uint prev_count;
	prev_count = atomicAdd(cellCount[hashedCellIndex],1);
	cellParticleBuff[cellOffsets[hashedCellIndex]+prev_count] = i;
}